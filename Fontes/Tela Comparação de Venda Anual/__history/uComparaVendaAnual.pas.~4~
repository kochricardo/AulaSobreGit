unit uComparaVendaAnual;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, Grids, DBGrids, DB, DBClient, ComCtrls,
  uAuxiliarCompras,Printers, uRotinasGenericas;

type
  T_frmComparacaoAnualVenda = class(TForm)
    StatusBar1: TStatusBar;
    GroupBox1: TGroupBox;
    _cdsProdutosVenda: TClientDataSet;
    _dsProdutosVenda: TDataSource;
    _dbgComparacaoAnual: TDBGrid;
    _btnExecuta: TBitBtn;
    _edtNumeroFornecedor: TEdit;
    Label1: TLabel;
    _cbxOpcaoCDs: TComboBox;
    Label18: TLabel;
    _bitFechar: TBitBtn;
    _cdsVendaAnual: TClientDataSet;
    _btnParaExcel: TBitBtn;
    procedure _btnExecutaClick(Sender: TObject);
    procedure _bitFecharClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure _dbgComparacaoAnualDrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure _btnParaExcelClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    procedure setGridProduto;
    procedure SetVendamensal;
    function getVendaMensal(PnrProduto: Integer; dtVenda: TDateTime): Integer;
    procedure CabecalhoInicioPag(nrLaboratorio, nrLinha, nrDias, nrGrupo,
      nrLeadTime, nrPrazoPadrao: Integer; stNomeLaboratorio,
      stCurvaLaboratorio: String);
    procedure CabecalhoPag(nrLinha: Integer);
    procedure Imprimir;
    procedure LinhaDetalhe(nrLinha, nrCodigo, nrUnidadeTrimistre, nrUnidadeMes3,
      nrUnidadeMes2, nrUnidadeMes1, nrUnidadeMes0, nrUnidadePendencia,
      nrUnidadeEstoque, nrUnidadeEmbalagem, nrEstoqueMaximo: Integer; nmProduto,
      nmApresentacao, nmUnidade, nmCurva, ds_pendencia: String; pcDesconto,
      vlPrecoUnitario: Double);
    procedure SomaRodapePag(nrLinha: Integer);
    procedure TopoPagina(nrPagina, nrLinha: Integer);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  _frmComparacaoAnualVenda: T_frmComparacaoAnualVenda;
  nrRegistro:Integer;

implementation

{$R *.dfm}

procedure T_frmComparacaoAnualVenda._dbgComparacaoAnualDrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
   with _dbgComparacaoAnual do
   begin

// mude a cor das Linha
   If odd(_cdsProdutosVenda.RecNo) then
   begin
      Canvas.Font.Color := clblack;
     Canvas.Brush.Color := clSkyBlue;
   end
  else
  begin
    Canvas.Font.Color := clblack;
    Canvas.Brush.Color := clWhite;
  end;
//


// mude a cor de celulas selecionadas
      if(gdSelected in State) then
      begin
         Canvas.brush.Color:= clblue;
         Canvas.Font.Color:= clWhite;
      end;
// mude a cor das celulas com foco
      if(gdfocused in State) then
      begin
         Canvas.brush.Color:= clBlue;
         Canvas.Font.Color:= clwhite;
      end;
      DefaultDrawColumnCell(Rect,DataCol,Column,state);
   end;

end;

procedure T_frmComparacaoAnualVenda.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  action:=cafree;
end;

procedure T_frmComparacaoAnualVenda._bitFecharClick(Sender: TObject);
begin
 close;
end;

procedure T_frmComparacaoAnualVenda._btnExecutaClick(Sender: TObject);
var
 nrFornecedor:Integer;
begin
   _btnParaExcel.Enabled:=false;
   _btnExecuta.Enabled:=false;
   nrFornecedor:=StrToIntDef(_edtNumeroFornecedor.Text,0);
   _cdsVendaAnual:=GetVendaProdutosComparacao(0,nrFornecedor);
   _cdsVendaAnual.Open;
   if nrFornecedor>0 then
   begin
    _cdsProdutosVenda:=GetProdutosComparacao(0,nrFornecedor);
    _dsProdutosVenda.DataSet:=_cdsProdutosVenda;
    _cdsProdutosVenda.Open;
     setGridProduto;
   end;
   if not _cdsProdutosVenda.IsEmpty then
   begin
      nrRegistro:=_cdsProdutosVenda.RecordCount;
      StatusBar1.Panels[2].Text:= FormatFloat('000000',nrRegistro);
      SetVendamensal;
      _btnParaExcel.Enabled:=true;


   end;
   _btnExecuta.Enabled:=true;

end;

procedure T_frmComparacaoAnualVenda._btnParaExcelClick(Sender: TObject);
begin
 GerarExcel(_cdsProdutosVenda);;
 //_btnParaExcel.Enabled:=false;
end;

procedure T_frmComparacaoAnualVenda.setGridProduto;
var
  I: Integer;
  nmMes,nmANo:String[20];
  contaMes,
  AnoAnterior,
  AnoAtual:Integer;
  DadosData:TDataRetorno;
begin
 TStringField(_cdsProdutosVenda.FieldByName('ID_ANO')).DisplayLabel:='Ano';
 TStringField(_cdsProdutosVenda.FieldByName('ID_ANO')).DisplayWidth:=4;

 TIntegerField(_cdsProdutosVenda.FieldByName('Codigo')).DisplayLabel:='Cod.Prod.';
 TIntegerField(_cdsProdutosVenda.FieldByName('Codigo')).DisplayWidth:=8;

 TStringField(_cdsProdutosVenda.FieldByName('NM_MERCADORIA')).DisplayLabel:='Nome Produto';
 TStringField(_cdsProdutosVenda.FieldByName('NM_MERCADORIA')).DisplayWidth:=25;

 TStringField(_cdsProdutosVenda.FieldByName('DS_APRESENTACAO_MERCADORIA')).DisplayLabel:='Apresentação';
 TStringField(_cdsProdutosVenda.FieldByName('DS_APRESENTACAO_MERCADORIA')).DisplayWidth:=25;

 TStringField(_cdsProdutosVenda.FieldByName('DS_UNIDADE_MEDIDA')).DisplayLabel:='UN.';
 TStringField(_cdsProdutosVenda.FieldByName('DS_UNIDADE_MEDIDA')).DisplayWidth:=03;
 AnoAnterior:=24;
 AnoAtual:=12;
 nmMes:='';
 for I := 1 to 13 do
 begin
     DadosData:=InformacaoData(incMonth(dtSistema,-AnoAnterior));
     nmMes:=copy(DadosData.NomeMes,1,3);
     nmMes:=nmMes+' - '+ FormatFloat('0000',DadosData.Ano);
     DadosData:=InformacaoData(incMonth(dtSistema,-AnoAtual));
     nmMes:=nmMes+'/'+ FormatFloat('0000',DadosData.Ano);
     dec(AnoAnterior);
     dec(AnoAtual);
     TIntegerField(_cdsProdutosVenda.Fields[4+i]).DisplayLabel:=nmMes;
     TIntegerField(_cdsProdutosVenda.Fields[4+i]).DisplayWidth:=13;
     TIntegerField(_cdsProdutosVenda.Fields[4+i]).DisplayFormat:='###,###,##0';
 end;

{      SQL.Add(',,0 MES_01,0 MES_02,0');
      SQL.Add('MES_03,0 MES_04,0 MES_05,0 MES_06,0 MES_07,0 MES_08,0 MES_09,');
      SQL.Add('0 MES_10,0 MES_11,0 MES_12');}

end;

procedure T_frmComparacaoAnualVenda.SetVendamensal;
var
  I: Integer;
  nrColuna,nrVenda,nrContaReg:Integer;
  dtAnterior :String;
  dtPosteriro:String;
  dtAno_A,dtAno_B :TDate;
begin
    _cdsProdutosVenda.DisableControls;
    _cdsProdutosVenda.First;
    while not _cdsProdutosVenda.Eof do
    begin
       nrColuna:=0;
       inc(nrContaReg);
       StatusBar1.Panels[0].Text:='Aguarde...';
       for I := 24 downto 12 do
       begin
          _cdsProdutosVenda.EDIT;
          dtAnterior:=FormatDateTime('01/MM/YYYY',INCMONTH(dtSistema,-I));
          Inc(nrColuna);
          nrVenda:=getVendaMensal(_cdsProdutosVenda.FieldByName('CODIGO').AsInteger,StrToDate(dtAnterior));
          _cdsProdutosVenda.Fields[4+nrColuna].AsInteger:=nrVenda;
          StatusBar1.Panels[1].Text:= FormatFloat('0000000/0',_cdsProdutosVenda.FieldByName('CODIGO').AsInteger)+' - '+
                                      _cdsProdutosVenda.FieldByName('NM_MERCADORIA').AsString+ '   '+
                                      _cdsProdutosVenda.FieldByName('DS_APRESENTACAO_MERCADORIA').AsString+ ' -  '+
                                       ' Periodo --> '+ dtAnterior;
          StatusBar1.repaint;
       end;
       nrColuna:=0;
       Application.ProcessMessages;
       _dbgComparacaoAnual.Repaint;
       inc(nrContaReg);
      _cdsProdutosVenda.Next;
       for I := 12 downto 00 do
       begin
          _cdsProdutosVenda.EDIT;
          Inc(nrColuna);
         if I>0 then
          dtAnterior:=FormatDateTime('01/MM/YYYY',INCMONTH(dtSistema,-I))
         else
          dtAnterior:=FormatDateTime('dd/MM/YYYY',dtSistema-1);
          nrVenda:=getVendaMensal(_cdsProdutosVenda.FieldByName('CODIGO').AsInteger,StrToDate(dtAnterior));
          _cdsProdutosVenda.Fields[4+nrColuna].AsInteger:=nrVenda;
          StatusBar1.Panels[1].Text:= FormatFloat('0000000/0',_cdsProdutosVenda.FieldByName('CODIGO').AsInteger)+' - '+
                                      _cdsProdutosVenda.FieldByName('NM_MERCADORIA').AsString+ '   '+
                                      _cdsProdutosVenda.FieldByName('DS_APRESENTACAO_MERCADORIA').AsString+ ' -  '+
                                      ' Periodo --> '+ dtAnterior;
          StatusBar1.repaint;
       end;
       nrRegistro:=_cdsProdutosVenda.RecordCount;
       StatusBar1.Panels[2].Text:= FormatFloat('000000',nrRegistro)+' - '+FormatFloat('000000',nrRegistro-nrContaReg);;

      _cdsProdutosVenda.Next;
    end;
    _cdsProdutosVenda.EnableControls;
    StatusBar1.Panels[0].Text:='';
    StatusBar1.Panels[1].Text:='';

end;

procedure T_frmComparacaoAnualVenda.FormShow(Sender: TObject);
begin
  _edtNumeroFornecedor.SetFocus;
end;

function T_frmComparacaoAnualVenda.getVendaMensal(PnrProduto:Integer;dtVenda:TDateTime):Integer;
begin
   Result:=0;
   if NOT _cdsVendaAnual.Active then
      _cdsVendaAnual.Open;

   if _cdsVendaAnual.Locate('CODIGO;DATW_W',VarArrayOf([PnrProduto,dtVenda]),[]) then
      Result:=_cdsVendaAnual.FieldByName('QT_VENDIDA').AsInteger;

end;

procedure T_frmComparacaoAnualVenda.Imprimir;
var
  i: Integer;
  loDir,
  loPastaLocal, loNomeArquivo: String;
  LoCodigo, loProduto, loApresentacao, LoUn, loPcDesconto, loVendaTrimestre,
    loVendaMes3, loVendaMes2, loVendaMes1, loVendaMes0, loPendencia, loPreco,
    loEstoque, loEmbalagem, loCurva: String;
  nrPendencia: Integer;
  vlContaLinha,vlPag,
  linha :Integer;
begin

  with Printer do
  begin
    vlContaLinha := 0;
    Canvas.Font.Name := 'Courier New';
    Canvas.Font.Size := 08;
    vlPag := 1;
    Linha := 200;
    Title := 'Sugestão Compra';
    Orientation := poLandScape;
    BeginDoc;
    Linha := Linha - Printer.Canvas.Font.Height + 10;
    TopoPagina(vlPag, Linha);
    Linha := Linha - Printer.Canvas.Font.Height + 10;
    DaDosFornecedor := GetDadosLaboratorio(nrFornecedor);
    CabecalhoInicioPag(DaDosFornecedor.nrFornecedor, Linha, nrDias,
      DaDosFornecedor.nrGrupoFornecedor, DaDosFornecedor.nrDiasLeadTime,
      DaDosFornecedor.nrPrazoPedido, DaDosFornecedor.dsNomeFantasia, '');
    Linha := Linha - Printer.Canvas.Font.Height + 10;
    CabecalhoPag(vgLinha);
    _cdsSugestaoCompra.First;
    while not _cdsSugestaoCompra.Eof DO
    begin
      loPendencia := '';
      if not _cdsPedidosPendentes.IsEmpty then
        loPendencia := _cdsPedidosPendentesDS_PEDIDO.AsString;
      nrPendencia := _cdsSugestaoCompraUNI_PENDENTE.AsInteger;

      LinhaDetalhe(vgLinha, _cdsSugestaoCompraCODIGO.AsInteger,
        _cdsSugestaoCompraQT_VENDA.AsInteger, _cdsSugestaoCompraMES3.AsInteger,
        _cdsSugestaoCompraMES2.AsInteger, _cdsSugestaoCompraMES1.AsInteger,
        _cdsSugestaoCompraMES0.AsInteger, nrPendencia,
        _cdsSugestaoCompraESTQ.AsInteger,
        _cdsSugestaoCompraEMB_COMPRA.AsInteger,
        _cdsSugestaoCompraQT_ESTOQUE_MAXIMO.AsInteger,
        _cdsSugestaoCompraPRODUTO.AsString,
        _cdsSugestaoCompraAPRESENTACAO.AsString,
        _cdsSugestaoCompraUNID.AsString, _cdsSugestaoCompraCURVA.AsString,
        loPendencia, _cdsSugestaoCompraPC_DESCONTO_PADRAO_COMPRA.Asfloat,
        _cdsSugestaoCompraUNITARIO.Asfloat);
      _cdsSugestaoCompra.Next;
    end;
    SomaRodapePag(vgLinha);
    EndDoc;
  end;
end;

procedure T_frmComparacaoAnualVenda.TopoPagina(nrPagina, nrLinha: Integer);
begin
  Inc(vlContaLinha);
  Printer.Canvas.TextOut(0050, nrLinha, 'Genésio A. Mendes & Cia Ltda');
  Printer.Canvas.TextOut(3100, nrLinha, 'Sugestão Compra');
  Printer.Canvas.TextOut(4500, nrLinha,
    'Data :  ' + FormatDateTime('dd/mm/yyyy', Date));
  Printer.Canvas.TextOut(5500, nrLinha, 'Pagina: ' + FormatFloat('##0',
    nrPagina));
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0050, nrLinha, replicate('=', 199));
  Inc(vlContaLinha);
  vgLinha := nrLinha;
end;

(* ************************ *)
procedure T_frmComparacaoAnualVenda.CabecalhoInicioPag(nrLaboratorio, nrLinha,
  nrDias, nrGrupo, nrLeadTime, nrPrazoPadrao: Integer;
  stNomeLaboratorio, stCurvaLaboratorio: String);
begin
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Inc(vlContaLinha);
  Printer.Canvas.TextOut(0050, nrLinha, 'Laboratório :' + FormatFloat('##0',
    nrLaboratorio));
  Printer.Canvas.TextOut(0900, nrLinha, stNomeLaboratorio);
  Printer.Canvas.TextOut(2200, nrLinha, stCurvaLaboratorio);
  Printer.Canvas.TextOut(2500, nrLinha, 'Sugestão de Compra para  ' +
    FormatFloat('##0', nrDias));
  Printer.Canvas.TextOut(3950, nrLinha, 'Grupo : ' + FormatFloat('##0',
    nrGrupo));
  Printer.Canvas.TextOut(4500, nrLinha, 'LeadTime : ' + FormatFloat('##0',
    nrLeadTime));
  Printer.Canvas.TextOut(5500, nrLinha, 'Prazo Padrão : ' + FormatFloat('##0',
    nrPrazoPadrao));
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0050, nrLinha, replicate('=', 199));
  Inc(vlContaLinha);
  vgLinha := nrLinha;
end;

(* ************************ *)
procedure T_frmComparacaoAnualVenda.CabecalhoPag(nrLinha: Integer);
begin
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Inc(vlContaLinha);
  Printer.Canvas.TextOut(0050, nrLinha, 'Código');
  Printer.Canvas.TextOut(0400, nrLinha, 'Produto');
  Printer.Canvas.TextOut(1200, nrLinha, 'Apresentação');
  Printer.Canvas.TextOut(2150, nrLinha, 'UN');
  Printer.Canvas.TextOut(2350, nrLinha, '%.D');
  Printer.Canvas.TextOut(2650, nrLinha, 'Pço Unt.');
  Printer.Canvas.TextOut(3250, nrLinha, 'Trim');
  Printer.Canvas.TextOut(3650, nrLinha, nmMes3);
  Printer.Canvas.TextOut(4050, nrLinha, nmMes2);
  Printer.Canvas.TextOut(4450, nrLinha, nmMes1);
  Printer.Canvas.TextOut(4850, nrLinha, nmMes0);
  Printer.Canvas.TextOut(5250, nrLinha, 'Pend');
  Printer.Canvas.TextOut(5550, nrLinha, 'Estq');
  Printer.Canvas.TextOut(5950, nrLinha, 'Emb');
  Printer.Canvas.TextOut(6150, nrLinha, 'Curva');
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0050, nrLinha, replicate('=', 199));
  Inc(vlContaLinha);
  vgLinha := nrLinha;
end;

(* ****************************************************** *)
procedure T_frmComparacaoAnualVenda.SomaRodapePag(nrLinha: Integer);
begin
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Inc(vlContaLinha);
  Printer.Canvas.TextOut(0050, nrLinha, replicate('=', 199));
  Inc(vlContaLinha);
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0400, nrLinha, 'Totais :');
  Printer.Canvas.TextOut(3150, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0',
    _cdsSugestaoCompraSomaVdaTrimestre.AsVariant)));
  Printer.Canvas.TextOut(3550, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0',
    _cdsSugestaoCompraSomaMes3.AsVariant)));

  Printer.Canvas.TextOut(3950, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0',
    _cdsSugestaoCompraSomaMes2.AsVariant)));
  Printer.Canvas.TextOut(4350, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0',
    _cdsSugestaoCompraSomaMes1.AsVariant)));
  Printer.Canvas.TextOut(4750, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0',
    _cdsSugestaoCompraSomaMes0.AsVariant)));
  Printer.Canvas.TextOut(5150, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0',
    _cdsSugestaoCompraSomaUnidadePendentes.AsVariant)));
  Printer.Canvas.TextOut(5500, nrLinha, formataNumero(06, FormatFloat('###,##0',
    _cdsSugestaoCompraSomaUnidadeEstoque.AsVariant)));
  Inc(vlContaLinha);
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0050, nrLinha, replicate(' ', 199));
  Printer.Canvas.TextOut(0400, nrLinha, 'Venda R$.');
  Printer.Canvas.TextOut(1000, nrLinha, nmMes3 + ':');
  Printer.Canvas.TextOut(1400, nrLinha,
    formataNumero(11, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaVlMes3.AsVariant)));

  Printer.Canvas.TextOut(2029, nrLinha, nmMes2);
  Printer.Canvas.TextOut(2429, nrLinha,
    formataNumero(11, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaVlMes2.AsVariant)));

  Printer.Canvas.TextOut(3058, nrLinha, nmMes1);
  Printer.Canvas.TextOut(3458, nrLinha,
    formataNumero(11, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaVlMes1.AsVariant)));

  Printer.Canvas.TextOut(4087, nrLinha, nmMes0);
  Printer.Canvas.TextOut(4487, nrLinha,
    formataNumero(11, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaVlMes0.AsVariant)));

  Inc(vlContaLinha);
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0050, nrLinha, replicate(' ', 199));

  Printer.Canvas.TextOut(0400, nrLinha, 'Totais R$.');
  Printer.Canvas.TextOut(1000, nrLinha, 'Estoque (Pço. Venda):');
  Printer.Canvas.TextOut(1800, nrLinha,
    formataNumero(17, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaVlrEstoque.AsVariant)));

  Printer.Canvas.TextOut(2800, nrLinha, 'Compra. Sug.s/Pend.: ');
  Printer.Canvas.TextOut(3700, nrLinha,
    formataNumero(17, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaSugestaoCompraSPendencia.AsVariant)));
  Printer.Canvas.TextOut(4700, nrLinha, 'Compra. Sug.C/Pend.: ');
  Printer.Canvas.TextOut(5500, nrLinha,
    formataNumero(17, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaSugestaoCompraCPendencia.AsVariant)));

  Inc(vlContaLinha);
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0050, nrLinha, replicate(' ', 199));

  Printer.Canvas.TextOut(1000, nrLinha, 'Pendencia Pço Venda :');
  Printer.Canvas.TextOut(1800, nrLinha,
    formataNumero(17, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaValorPendenciaFabrica.AsVariant)));

  Printer.Canvas.TextOut(2800, nrLinha, 'Pendencia Pço Custo :');
  Printer.Canvas.TextOut(3700, nrLinha,
    formataNumero(17, FormatFloat('##,###,###,##0.00',
    _cdsSugestaoCompraSomaValorPendenciaCusto.AsVariant)));

  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Printer.Canvas.TextOut(0050, nrLinha, replicate('=', 199));
  Inc(vlContaLinha);
  vgLinha := nrLinha;
end;
(* ****************************************************** *)
(* ****************************************************** *)

procedure T_frmComparacaoAnualVenda.LinhaDetalhe(nrLinha, nrCodigo,
  nrUnidadeTrimistre, nrUnidadeMes3, nrUnidadeMes2, nrUnidadeMes1,
  nrUnidadeMes0, nrUnidadePendencia, nrUnidadeEstoque, nrUnidadeEmbalagem,
  nrEstoqueMaximo: Integer; nmProduto, nmApresentacao, nmUnidade, nmCurva,
  ds_pendencia: String; pcDesconto, vlPrecoUnitario: Double);
begin
  nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
  Inc(vlContaLinha);
  Printer.Canvas.TextOut(0050, nrLinha,
    formataNumero(07, FormatFloat('######/#', nrCodigo)));
  Printer.Canvas.TextOut(0400, nrLinha, FormataString(nmProduto, 15));
  Printer.Canvas.TextOut(1200, nrLinha, FormataString(nmApresentacao, 15));
  Printer.Canvas.TextOut(2150, nrLinha, FormataString(nmUnidade, 2));
  Printer.Canvas.TextOut(2250, nrLinha, formataNumero(06, FormatFloat('##0.00',
    pcDesconto)));
  Printer.Canvas.TextOut(2600, nrLinha,
    formataNumero(09, FormatFloat('##,##0.00', vlPrecoUnitario)));
  if nrUnidadeTrimistre < 9999999 then
    Printer.Canvas.TextOut(3150, nrLinha,
      formataNumero(07, FormatFloat('#,###,##0', nrUnidadeTrimistre)))
  else
    Printer.Canvas.TextOut(3150, nrLinha, formataNumero(07, 'Nr.>9999999'));
  if nrUnidadeMes3 < 9999999 then
    Printer.Canvas.TextOut(3550, nrLinha,
      formataNumero(07, FormatFloat('#,###,##0', nrUnidadeMes3)))
  else
    Printer.Canvas.TextOut(3550, nrLinha, formataNumero(07, 'Nr.>9999999'));

  Printer.Canvas.TextOut(3950, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0', nrUnidadeMes2)));
  Printer.Canvas.TextOut(4350, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0', nrUnidadeMes1)));
  Printer.Canvas.TextOut(4750, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0', nrUnidadeMes0)));
  Printer.Canvas.TextOut(5150, nrLinha,
    formataNumero(07, FormatFloat('#,###,##0', nrUnidadePendencia)));
  Printer.Canvas.TextOut(5500, nrLinha, formataNumero(06, FormatFloat('###,##0',
    nrUnidadeEstoque)));
  if nrUnidadeEmbalagem < 99999 then
    Printer.Canvas.TextOut(5900, nrLinha,
      formataNumero(05, FormatFloat('####0', nrUnidadeEmbalagem)))
  else
    Printer.Canvas.TextOut(5900, nrLinha, formataNumero(05, 'Nr.>99999'));

  Printer.Canvas.TextOut(6150, nrLinha, nmCurva + ' - ' + FormatFloat('#0',
    nrEstoqueMaximo));
  if (trim(ds_pendencia) <> '') and (not _chkPendencia.Checked) then
  begin
    while not _cdsPedidosPendentes.Eof do
    begin
      Inc(vlContaLinha);
      ds_pendencia := _cdsPedidosPendentesDS_PEDIDO.AsString;
      nrLinha := nrLinha - Printer.Canvas.Font.Height + 10;
      Printer.Canvas.TextOut(00500, nrLinha, ds_pendencia);
      _cdsPedidosPendentes.Next;
    end;
  end;
  vgLinha := nrLinha;
  if vlContaLinha > 55 then
  begin
    Printer.NewPage;
    vlContaLinha := 0;
    Linha := 200;
    Inc(vlPag);
    TopoPagina(vlPag, Linha);
    CabecalhoPag(vgLinha);
  end;
end;


end.
