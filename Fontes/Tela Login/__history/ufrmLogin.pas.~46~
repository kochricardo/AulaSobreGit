unit ufrmLogin;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, StdCtrls, Buttons, FMTBcd, DB, SqlExpr, uAlteraSenha,
  DBClient, uRotinasGenericas, uTelaPrincipal;

type
  T_frmLogin = class(TForm)
    Panel1: TPanel;
    Label1: TLabel;
    edtLogin: TEdit;
    Label2: TLabel;
    edtSenha: TEdit;
    bbtnOK: TBitBtn;
    bbtnCancela: TBitBtn;
    bbtnAlteraSenha: TBitBtn;
    _cdsUsuario: TClientDataSet;
    procedure bbtnOKClick(Sender: TObject);
    procedure bbtnCancelaClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure mudarComEnter(Sender: TObject; Var Key: Char);
    procedure edtLoginExit(Sender: TObject);
    procedure bbtnAlteraSenhaClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure edtSenhaExit(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormActivate(Sender: TObject);
  private
    { Private declarations }
    senha,
    senhaDescriptada: string;

    codUsuario: integer;
    NumeroDeTentativa : Integer;
    SucessodeLogin    : Boolean;
    function VerificaUsuario(nmUsuario, dsSenha: String): Boolean;
    function ConexaoComOServidor: Boolean;
    function CriteriosParaLogin:boolean;
   function AbreUsuario(cdUsuario,cdUsuarioGeral:Integer;IdDousuario, Senha: String): Boolean;
  public
    { Public declarations }
    nomeUsuario, nomeLogin: string;
    nomeUsuarioLogado,
    senhaLogado,
    senhaEncriptada :String;
  end;

var
  _frmLogin: T_frmLogin;
   idEncerraSistema:Boolean;

implementation

uses uDm, uUsuario, uAuxiliarCompras;


{$R *.dfm}

procedure T_frmLogin.mudarComEnter(Sender: TObject; Var Key: Char);
begin
   if Key = #13 then
      Perform(Wm_NextDlgCtl,0,0);
end;

procedure T_frmLogin.bbtnOKClick(Sender: TObject);
var
  senhaDescriptada, senhaDigitada: string;
  tempQuery : TSQLQuery;
  data_ponto : TDate;
  Abre_tela  : String;
  Usuario :TUsuario;
  DadosComprador :TDadosComprador;

begin
   if CriteriosParaLogin then
   begin
   // if _dmGeral.RunQueryUsuario(0,edtLogin.Text,'') then
     Usuario:=GetUsuario(0,0,edtLogin.Text,'');

     if Usuario<>NIL then
     begin
            DadosComprador :=CompradorPedido(0,Usuario.nrMatricula);

     end;
    if  AbreUsuario(0,0,edtLogin.Text,'') then
    begin
      senhaDescriptada:=DesEncripta(senhaEncriptada);
    end
    else
     begin
       Mensagem('Usuario Inválido',16);
       edtLogin.SetFocus;
       exit;
     end;
     if UpperCase(edtSenha.text)<>UpperCase(senhaDescriptada) then
     begin
      Mensagem('Senha Inválida !!!',16);
      inc(NumeroDeTentativa);
      if NumeroDeTentativa > 4 then
      Begin
            ShowMessage('Número de Tentativas Excedeu o Limite!');
            Application.Terminate;
      End;
      ShowMessage('Acesso Negado, Verifique o Nome de Usuário ou Senha');
      edtSenha.SetFocus;
      exit;
   end;
   if AbreUsuario(0,0,edtLogin.Text,senhaEncriptada) then
   begin
     _frmTelaPrincipal.Enabled:=TRUE;
     close;
   end;
   end;
end;

procedure T_frmLogin.bbtnCancelaClick(Sender: TObject);
begin
   idEncerraSistema:=false;
   if (Application.MessageBox('Deseja encerrar o programa?','Confirmação',MB_YESNO+MB_ICONQUESTION)) = ID_YES then
   begin
    //  TELA_ATIVA:=TRUE;
      idEncerraSistema:=TRUE;
      close;
   end;
end;

procedure T_frmLogin.FormCreate(Sender: TObject);
begin
  Panel1.Caption := Panel1.Caption + ' '+ dsVersaoSistema;
  bbtnAlteraSenha.Enabled:= false;
  NumeroDeTentativa:=0;
end;

procedure T_frmLogin.FormShow(Sender: TObject);
begin
//Conexão do Banco de Dado
 if ConexaoComOServidor then
 Begin

       // LblAviso.Visible   := False;
         FalhadeConexao     := False;
        //EdtIDLOGIN.Text := DtmLogDoUsuario.CdsNomesDosPCsNomeDoUsuario.AsString;

        edtLogin.Text := '';
        edtSenha.Text := '';
//        if edtLogin.CanFocus then edtLogin.SetFocus;

  End;

   {if (edtLogin.Text <> '' )  AND (edtSenha.Text = '') then
    begin
        EdtSENHA.SetFocus;
    end;}

end;

procedure T_frmLogin.edtLoginExit(Sender: TObject);
begin
{  if trim(edtLogin.Text)<>'' then
  begin
   if not VerificaUsuario(edtLogin.Text,'') then
    begin
      edtLogin.SetFocus;
      raise Exception.Create('Login não digitado!');
   end;
  end;}
  nmLogin:=trim(edtLogin.Text);

end;

procedure T_frmLogin.bbtnAlteraSenhaClick(Sender: TObject);
begin
   _frmAlteraSenha:= T_frmAlteraSenha.Create(Self);
//   _frmAlteraSenha.codUsuario:= codUsuario;
   _frmAlteraSenha.edtSenhaAtual.Text:= senha;
   _frmAlteraSenha.ShowModal;
   _frmAlteraSenha.Free;
end;

procedure T_frmLogin.FormActivate(Sender: TObject);
begin
   if  edtLogin.CanFocus then
       edtLogin.SetFocus;
    exit;
end;

procedure T_frmLogin.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := Cafree;
  if _frmLogin.ModalResult<>mrOk then
  begin
   //Encerra_sistema:=true;
//    Application.Terminate;

  end;
//  frmPrincipal.Enabled:=true;       // caso a usuario seja diferente do Admin
end;

function T_frmLogin.VerificaUsuario(nmUsuario,dsSenha:String):Boolean;
var
   senhaDigitada: string;
   tempQuery : TSQLQuery;
begin
    if trim(nmUsuario) = '' then
    begin
      Mensagem('Informe o Login!',48);
      edtLogin.SetFocus;
      exit;
    end;
    if trim(dsSenha)= '' then
    begin
      Mensagem('Informe a Senha!',48);
      edtSenha.SetFocus;
      exit;
    end;
 end;
procedure T_frmLogin.edtSenhaExit(Sender: TObject);
begin
 // VerificaUsuario(edtLogin.Text,edtSenha.Text)
    if _dm.RunQueryUsuario(0,nmLogin,senhaDescriptada) then
    begin
      if UpperCase(edtSenha.text)=UpperCase(DesEncripta(_dm.senhaEncriptada)) then
      begin
        bbtnAlteraSenha.Enabled:=true;
      end;
    end;

end;

function T_frmLogin.ConexaoComOServidor: Boolean;
begin

// 3 - ==========Conecta a aplicação ao banco de dado existente no caminho previsto
//Nunca convie nas variáveis sem atribuição de valor.

    Result := False;

    try
        _dm :=    T_dm.Create(nil);
        _dm._conexao.Connected:=true;

        If _dm._conexao.Connected then
        begin
            Result := True;
        End
        else
        begin
            FalhadeConexao     := True;
        end;

    except
        FalhadeConexao     := True;
    end;
end;

function T_FrmLogin.CriteriosParaLogin:boolean;
begin
//Verificar dados de Preenchimentos
   result:=true;
   if trim(edtLogin.Text)='' then
   begin
     Mensagem('Usuario Inválido',16);
     edtLogin.SetFocus;
     exit;
     result:=false;
   end;
   if EdtSENHA.Text = '' then
    begin
        ShowMessage('Senha não pode estar em branco!!!');
        edtSenha.SetFocus;
        result:=false;
        Abort;
    end;

//2 - Checar Usuario

end;

function T_frmLogin.AbreUsuario(cdUsuario,cdUsuarioGeral:Integer;IdDousuario, Senha: String): Boolean;
var
 stQuery :TstringList;
 idcomissao:String[1];
begin
    stQuery:=TStringList.Create;
    stQuery.Add('SELECT *');
    stQuery.Add('FROM');
    stQuery.Add('PRDDM.DC_USUARIO');
    stQuery.Add('Where');
    if (IdDousuario)<>'' then
      stQuery.Add('NM_LOGIN =:PnrLogin');
    if (Senha)<>'' then
        stQuery.Add(' and DS_PASSWD=:PdsPasswd');
    with _cdsUsuario do
    begin
        close;
        FetchParams;
        CommandText:=stQuery.Text;
        Params.ParamByName('PnrLogin').AsString:=IdDousuario;

        if (Senha)<>'' then
        begin
            Params.ParamByName('PdsPasswd').AsString:=Senha;
        end;
        open;
        end;


    result:=false;
    if not _cdsUsuario.IsEmpty then
    begin
      result:=true;
      nomeUsuarioLogado:= _cdsUsuario.FieldByName('NM_LOGIN').AsString;
      senhaLogado      := _cdsUsuario.FieldByName('DS_PASSWD').AsString;
      senhaEncriptada  := _cdsUsuario.FieldByName('DS_PASSWD').AsString;
      nmlogin          := _cdsUsuario.FieldByName('NM_LOGIN').AsString;
      login:=nmLogin;
      idcomissao       := _cdsUsuario.FieldByName('ID_COMISSAO').AsString;

      cdUsuario          :=_cdsUsuario.FieldByName('CD_USUARIO').AsInteger;
      cdUsuarioSistema   := cdUsuario ;
      nmUsuario          := _cdsUsuario.FieldByName('NM_USUARIO').AsString;
      idPrivilegio       := _cdsUsuario.FieldByName('ID_PRIVILEGIO').AsInteger;
      nrCompradorSistema := _cdsUsuario.FieldByName('NR_CCUSTO').AsInteger;
      nrCompradorLogado  := _cdsUsuario.FieldByName('NR_CCUSTO').AsInteger;

      if idcomissao<>'C' then
      begin
        Mensagem('Usuario não tem permissão para usuar Sistema de Devolução',48);
        halt;
      end;
    end;

end;


end.
